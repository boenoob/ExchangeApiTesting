// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ExchangeApiTesting.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ExchangeCurrency", SourceFile="Features\\ExchangeCurrency.feature", SourceLine=0)]
    public partial class ExchangeCurrencyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ExchangeCurrency.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ExchangeCurrency", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode(string currency1, string currency2, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("currency1", currency1);
            argumentsOfScenario.Add("currency2", currency2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that two given valid currencies will result in an OK response code", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I do a \"/rate\" GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When(string.Format("I have the following currencies \"{0}\" and \"{1}\"", currency1, currency2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.And("I send a request to the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.Then("the response code should be 200 with response message \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that two given valid currencies will result in an OK response code, NOK", SourceLine=9)]
        public virtual void VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode_NOK()
        {
#line 3
this.VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode("NOK", "SEK", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that two given valid currencies will result in an OK response code, USD", SourceLine=9)]
        public virtual void VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode_USD()
        {
#line 3
this.VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode("USD", "EUR", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that two given valid currencies will result in an OK response code, SEK", SourceLine=9)]
        public virtual void VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode_SEK()
        {
#line 3
this.VerifyThatTwoGivenValidCurrenciesWillResultInAnOKResponseCode("SEK", "USD", ((string[])(null)));
#line hidden
        }
        
        public virtual void VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode(string currency1, string currency2, string responseCode, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("currency1", currency1);
            argumentsOfScenario.Add("currency2", currency2);
            argumentsOfScenario.Add("responseCode", responseCode);
            argumentsOfScenario.Add("errorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that any combination of invalid currencies results in a Bad Request respon" +
                    "se code", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given("I do a \"/rate\" GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.When(string.Format("I have the following currencies \"{0}\" and \"{1}\"", currency1, currency2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.And("I send a request to the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.Then(string.Format("the response code should be {0} with error message \"{1}\"", responseCode, errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that any combination of invalid currencies results in a Bad Request respon" +
            "se code, Variant 0", SourceLine=20)]
        public virtual void VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode_Variant0()
        {
#line 14
this.VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode("AAA", "SEK", "400", "Invalid currency", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that any combination of invalid currencies results in a Bad Request respon" +
            "se code, Variant 1", SourceLine=20)]
        public virtual void VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode_Variant1()
        {
#line 14
this.VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode("NOR", "AAA", "400", "Invalid currency", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Verify that any combination of invalid currencies results in a Bad Request respon" +
            "se code, Variant 2", SourceLine=20)]
        public virtual void VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode_Variant2()
        {
#line 14
this.VerifyThatAnyCombinationOfInvalidCurrenciesResultsInABadRequestResponseCode("AAA", "BBB", "400", "Invalid currency", ((string[])(null)));
#line hidden
        }
        
        public virtual void ToVerifyThatInputsGivenHaveTheSameValuesInResponse(string amount, string fromCurrency, string toCurrency, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To verify that inputs given have the same values in response", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("I do a \"/convert\" GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And(string.Format("I want to convert {0} \"{1}\" to \"{2}\"", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.When("I send a request to the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then(string.Format("The given input values: {0} \"{1}\" \"{2}\" are the same in response", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To verify that inputs given have the same values in response, 1547", SourceLine=31)]
        public virtual void ToVerifyThatInputsGivenHaveTheSameValuesInResponse_1547()
        {
#line 25
this.ToVerifyThatInputsGivenHaveTheSameValuesInResponse("1547", "USD", "NOK", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To verify that inputs given have the same values in response, 152070", SourceLine=31)]
        public virtual void ToVerifyThatInputsGivenHaveTheSameValuesInResponse_152070()
        {
#line 25
this.ToVerifyThatInputsGivenHaveTheSameValuesInResponse("152070", "NOK", "EUR", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To verify that inputs given have the same values in response, 18900", SourceLine=31)]
        public virtual void ToVerifyThatInputsGivenHaveTheSameValuesInResponse_18900()
        {
#line 25
this.ToVerifyThatInputsGivenHaveTheSameValuesInResponse("18900", "NOK", "SEK", ((string[])(null)));
#line hidden
        }
        
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer(string amount, string fromCurrency, string toCurrency, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("fromCurrency", fromCurrency);
            argumentsOfScenario.Add("toCurrency", toCurrency);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify that Given two currencies and amount converts successfully with data fr" +
                    "om fixer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("I do a \"/convert\" GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And(string.Format("I want to convert {0} \"{1}\" to \"{2}\"", amount, fromCurrency, toCurrency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.When("I send a request to the API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("Verify that the response after conversion is valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully with data fr" +
            "om fixer, 1547", SourceLine=42)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer_1547()
        {
#line 36
this.ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer("1547", "USD", "NOK", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully with data fr" +
            "om fixer, 152070", SourceLine=42)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer_152070()
        {
#line 36
this.ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer("152070", "NOK", "EUR", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify that Given two currencies and amount converts successfully with data fr" +
            "om fixer, 18900", SourceLine=42)]
        public virtual void ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer_18900()
        {
#line 36
this.ToVerifyThatGivenTwoCurrenciesAndAmountConvertsSuccessfullyWithDataFromFixer("18900", "NOK", "SEK", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
